import os
import sys
import pathlib
from argparse import ArgumentParser
from os.path import exists
from os.path import join as pj

import surfa as sfa
from spheremorph.py.utils import norm_curvature
from spheremorph.tf.networks import JOSA
from spheremorph.tf.utils import *


def main():
    parser = ArgumentParser(prog="JOSA", description="Learning-based surface registration and parcellation")
    parser.add_argument("--hmsp", type=str, help="which hemisphere, lh or rh")
    parser.add_argument("--sub_dir", type=str, help="path to subject directory (does not use $SUBJECTS_DIR)")
    parser.add_argument("--sulc_file", type=str, help="path to ?h.sulc file, overrides surf_dir/?h.sulc")
    parser.add_argument("--curv_file", type=str, help="path to ?h.curv file, overrides surf_dir/?h.curv")
    parser.add_argument("--inflated_curv_file", type=str,help="path to ?h.inflated.H file, overrides surf_dir/?h.inflated.H")
    parser.add_argument("--sphere_rot", type=str,help="path to ?h.sphere.rot file")
    parser.add_argument("--model", type=str,help="path to the model file")
    parser.add_argument("--output", type=str,help="custom output file, default is to save to subject/surf/hemi.sphere.reg")
    args = vars(parser.parse_args())

    # check for no arguments
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    model_file = args['model']
    if model_file is None:
        raise ValueError('model file must be provided')

    # first argument for hemisphere must be provided
    if args['hmsp'] and args['hmsp'] in ['lh', 'rh']:
        hmsp = args['hmsp']
    else:
        raise ValueError('hmsp must be lh or rh')

    # Check whether subject is needed 
    NeedSubject=0
    if(args['sulc_file'] is None or args['curv_file'] is None or args['inflated_curv_file'] is None or args['sphere_rot'] is None or args['output'] is None): NeedSubject=1

    sub_dir = args['sub_dir']
    if(NeedSubject):
        if(sub_dir is None):
            raise ValueError('subject dir needed unless all curv, inflated, sulc, sphere.rot, and outdir are specified')        
        surf_dir = pj(sub_dir, 'surf')
        if not exists(surf_dir):
            raise ValueError('surf directory could be found in subject directory')

    if(args['sulc_file']):
        sulc_file = args['sulc_file']
    else:
        sulc_file = pj(surf_dir, f'{hmsp}.sulc')

    if(args['curv_file']):
        curv_file = args['curv_file']
    else:
        curv_file = pj(surf_dir, f'{hmsp}.curv')

    if(args['inflated_curv_file']):
        inf_h_file = args['inflated_curv_file']
    else:
        inf_h_file = pj(surf_dir, f'{hmsp}.inflated.H')

    if(args['sphere_rot']):
        sphere_rot_file = args['sphere_rot']
    else:
        sphere_rot_file = pj(surf_dir, f'{hmsp}.sphere.rot')

    # Make sure all inputs exist
    for f in [sulc_file, curv_file, inf_h_file, sphere_rot_file]:
        print(f'{f}');
        if not exists(f):
            raise ValueError(f'ERROR: cannot find {f}')

    out_file_fixed = args['output']
    if out_file_fixed is None:
        out_file_fixed = pj(surf_dir, f'{hmsp}.sphere.reg')
    output_dir = os.path.dirname(out_file_fixed);
    out_file_prefix = out_file_fixed+".prefixed";
    print(f'prefix file {out_file_prefix}');
    print(f'output file {out_file_fixed}');
    print(f'model file {model_file}');

    pathlib.Path(output_dir).mkdir(parents=True, exist_ok=True)

    surf_feature_file = [sulc_file, curv_file, inf_h_file]

    # ==================== changes from here ====================
    pad_size = 16
    print('parameterizing cortical features ... ', end='')
    geoms = list()
    for file_name in surf_feature_file:
        geom = sfa.load_overlay(file_name)
        geom2 = norm_curvature(geom, which_norm='Median')
        geoms.append(geom2)
    geoms = np.stack(geoms, axis=1)

    sphere = sfa.load_mesh(sphere_rot_file)
    mrisp_geom = sfa.sphere.SphericalMapBarycentric(sphere).parameterize(geoms)
    mrisp_geom = mrisp_geom.framed_data
    mrisp_geom = (mrisp_geom - mrisp_geom.mean()) / mrisp_geom.std()
    mrisp_geom_padded = pad_2d_image_spherically(mrisp_geom, pad_size=pad_size, input_no_batch_dim=True)
    print('done')

    print('constructing the network ... ', end='')
    net_factor = 7
    is_bidir = True
    is_atlas_trainable = False
    is_semi = True
    is_isw = True
    is_njf = True
    pos_enc = 4
    num_outputs = 8
    losses = [dummy_loss] * num_outputs
    metrics = [None] * num_outputs
    metric_name = [None] * num_outputs
    img_shape = mrisp_geom_padded.shape[0:2]
    num_geom_ft = 3
    num_parc_ft = 32
    img_shape_ft = [(*img_shape, num_geom_ft), (*img_shape, num_parc_ft)]

    if net_factor == 0:
        unet_struct = [
            [128, 256, 384, 512, 640],  # encoder
            [640, 512, 384, 256, 128, 64, 32]  # decoder
        ]
    else:
        nf = 2 ** net_factor
        unet_struct = [[nf, ] * 5, [nf, ] * 7]

    model = JOSA(input_shape_ft=img_shape_ft, nb_unet_features=unet_struct,
                 loss_fn=losses, metric_fn=metrics, metric_name=metric_name,
                 is_bidir=is_bidir, int_steps=5, int_method='ss',
                 pad_size=pad_size, pos_enc=pos_enc,
                 is_semi=is_semi, is_atlas_trainable=is_atlas_trainable,
                 input_type=['float', 'prob'], is_isw=is_isw,
                 is_softmax=True, is_jacobian=True, is_neg_jacobian_filter=is_njf)
    print('done')

    print('loading the model ... ', end='')
    model.load_weights(model_file)
    print('done')

    print('registering to the atlas ... ')
    param_coord = sfa.sphere.SphericalMapBarycentric(sphere).parameterize(sphere.vertices)
    param_coord_padded = pad_2d_image_spherically(param_coord[np.newaxis, ...], pad_size)
    warped_param_coord = model.warp(mrisp_geom_padded[np.newaxis, ...], param_coord_padded, 'to_subject', 0)
    warped_param_coord_unpad = unpad_2d_image(warped_param_coord[0, :, :, :], pad_size, input_no_batch_dim=True)
    print('done')

    print('saving sphere.reg to disk ... ', end='')
    v = sfa.sphere.SphericalMapBarycentric(sphere).sample(warped_param_coord_unpad)
    v = v / np.linalg.norm(v, axis=-1, keepdims=True) * 100.0
    sphere_reg = sphere.copy()
    sphere_reg.vertices = v
    sfa.io.mesh.save_mesh(sphere_reg, out_file_prefix)
    print('done')

    print('removing intersecting vertices ... ')
    # cmd = f'source /autofs/homes/003/jl1013/.fs_env && mris_remove_intersection {out_file} {out_file_fixed}'
    cmd = f'mris_remove_intersection {out_file_prefix} {out_file_fixed}'
    os.system(cmd)
    os.remove(out_file_prefix)
    print('done')


# the following dummy functions are created specifically for this release
def dummy_loss(*args):
    if len(args) == 1:
        y_pred = args[0]
    elif len(args) == 2:
        _, y_pred = args
    else:
        y_pred = 0
    return tf.reduce_mean(y_pred)


if __name__ == "__main__":
    main()
